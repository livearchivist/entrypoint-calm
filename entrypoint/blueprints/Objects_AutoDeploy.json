{"status":{},"contains_secrets":false,"product_version":"2.9.1","spec":{"description":"","resources":{"client_attrs":{"cca975ad_deployment":{"y":-242.6428571429,"x":-28.8571428571},"4ea464bb_deployment":{"y":-244.1428604126,"x":336.2595252991}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"11fef628_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"43246da9_runbook","main_task_local_reference":{"kind":"app_task","name":"11fef628_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3da5032d_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"7444c181_runbook","main_task_local_reference":{"kind":"app_task","name":"3da5032d_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"b56d468b_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"a0698b52_runbook","main_task_local_reference":{"kind":"app_task","name":"b56d468b_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"80304071_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3c7811d8_runbook","main_task_local_reference":{"kind":"app_task","name":"80304071_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0af3c44f_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5033da4c_runbook","main_task_local_reference":{"kind":"app_task","name":"0af3c44f_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"DarkSite","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"OBJECT_STATUS","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"OBJECT_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"MSP_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ObjectsDeploy"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Set MSP Airgap Mode"},{"kind":"app_task","name":"Get UUIDs and VIP"},{"kind":"app_task","name":"Deploy Objects Server"}],"name":"c24ec0f4_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Set MSP Airgap Mode"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Get UUIDs and VIP"}},{"from_task_reference":{"kind":"app_task","name":"Get UUIDs and VIP"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Deploy Objects Server"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ObjectsDeploy"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Set MSP Airgap Mode","attrs":{"script":"# Set the JWT, headers and payload\n# pc_user = '@@{PC_CREDS.username}@@'\n# pc_pass = '@@{PC_CREDS.secret}@@'\n# headers = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n# payload = {\"enable\": True, \"lcm_server\": \"http:\/\/@@{address}@@\/release\"}\n\n\n# # MSP Airgap URL\n# url = \"http:\/\/localhost:2082\/msp\/airgap\"\n\n# # Call MSP Airgap API\n# resp_check = urlreq(url, verb='GET', auth='BASIC', user=pc_user, passwd=pc_pass,\n#                     headers=headers, verify=False)\n\n\n\n# # Ensure that MSP Airgap is set to proper address\n# if resp_check.ok:\n#     check_results = json.loads(resp_check.content)\n#     if check_results[\"enable\"] == False:\n#         print(\"MSP Airgap is currently disabled. We will now enable it.\")\n#         resp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass,\n#                       params=json.dumps(payload), headers=headers, verify=False)\n#         if resp.ok:\n#           print(\"MSP Airgap has been enabled.\")\n#     elif check_results[\"enable\"] == True:\n#         if check_results[\"lcm_server\"] != payload[\"lcm_server\"]:\n#             print(\"LCM Server does not match requested server, now changing.\")\n#             resp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass,\n#                       params=json.dumps(payload), headers=headers, verify=False)\n#             if resp.ok:\n#                 print(\"MSP Airgap has been updated to the new LCM Server address: \" + payload[\"lcm_server\"])\n#                 exit(0)\n#             else:\n#                 print(\"Failed to update LCM Server Address\")\n#                 exit(1)\n#         else:\n#             print(\"MSP Airgap is already enabled and set to: \" + check_results[\"lcm_server\"])\n#             exit(0)\n#     else:\n#         print(\"Unable to parse check_results: \")\n#         exit(1)\n# else:\n#     print(\"Unable to check MSP Airgap Status\")\n#     exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ObjectsDeploy"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Get UUIDs and VIP","attrs":{"exit_status":[],"script":"# Set the JWT, headers and payload\npc_user = '@@{PC_CREDS.username}@@'\npc_pass = '@@{PC_CREDS.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayload = {\"filter\":\"\"}\n\n\n\n# Set the address for Objects Check\nurl = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/subnets\/list\"\n\n# Make the call to get subnet list\nresp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass,\n              params=json.dumps(payload), headers=headers, verify=False)\n\n\n# Set Cluster and Subnet UUID variables\nif resp.ok:\n  response = json.loads(resp.content)\n  cluster_uuid = str(response[\"entities\"][0][\"status\"][\"cluster_reference\"][\"uuid\"])\n  subnet_uuid = str(response[\"entities\"][0][\"metadata\"][\"uuid\"])\n  print(\"CLUSTER_UUID=\" + cluster_uuid)\n  print(\"SUBNET_UUID=\" + subnet_uuid)\n  url_ip = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/clusters\/\" + cluster_uuid\n  resp_ip = urlreq(url_ip, verb='GET', auth='BASIC', user=pc_user, passwd=pc_pass,\n                   headers=headers, verify=False)\n  if resp_ip.ok:\n    response_ip = json.loads(resp_ip.content)\n    external_ip = str(response_ip[\"spec\"][\"resources\"][\"network\"][\"external_ip\"])\n    print(\"EXTERNAL_IP=\" + external_ip)\n    exit(0)\n  else:\n    print(\"Unable to get external IP\", json.dumps(json.loads(resp_ip.content), indent=4))\n\n# If the call failed\nelse:\n  print \"Could not get subnet list\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["CLUSTER_UUID","SUBNET_UUID","EXTERNAL_IP"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ObjectsDeploy"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Deploy Objects Server","attrs":{"script":"# Set the JWT, headers and payload\npc_user = '@@{PC_CREDS.username}@@'\npc_pass = '@@{PC_CREDS.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nobjects_dns_ip = \"@@{objects_dns_ip}@@\"\nobjects_vip_ip = \"@@{objects_vip_ip}@@\"\nobjects_client_ip_start = \"@@{objects_client_ip_start}@@\"\nobjects_client_ip_end = \"@@{objects_client_ip_end}@@\"\ndomain = \"@@{domain}@@\"\nsubnet_uuid = \"@@{SUBNET_UUID}@@\"\ncluster_uuid = \"@@{CLUSTER_UUID}@@\"\npayload = {\n      \"api_version\": \"3.0\",\n      \"metadata\": {\n        \"kind\": \"objectstore\"\n      },\n      \"spec\": {\n        \"name\": \"objectsauto\",\n        \"description\": \"AutoDeploy Objects for Test Drive\",\n        \"resources\": {\n          \"domain\": domain,\n          \"cluster_reference\": {\n            \"kind\": \"cluster\",\n            \"uuid\": cluster_uuid\n          },\n          \"buckets_infra_network_dns\": objects_dns_ip,\n          \"buckets_infra_network_vip\": objects_vip_ip,\n          \"buckets_infra_network_reference\": {\n            \"kind\": \"subnet\",\n            \"uuid\": subnet_uuid\n          },\n          \"client_access_network_reference\": {\n            \"kind\": \"subnet\",\n            \"uuid\": subnet_uuid\n          },\n          \"aggregate_resources\": {\n            \"total_vcpu_count\": 10,\n            \"total_memory_size_mib\": 32768,\n            \"total_capacity_gib\": 200\n          },\n          \"client_access_network_ipv4_range\": {\n            \"ipv4_start\": objects_client_ip_start,\n            \"ipv4_end\": objects_client_ip_end\n          }\n        }\n      }\n    }\n\n\n\n# Set the address for Objects Deploy\nurl = \"https:\/\/localhost:9440\/oss\/api\/nutanix\/v3\/objectstores\"\n\n# Make the call to deploy Objects Server\nresp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass,\n              params=json.dumps(payload), headers=headers, verify=False)\n\n\n# Get Objects Server Task and watch for completion\nif resp.ok:\n  response = json.loads(resp.content)\n  print(json.dumps(response))\n  exit(0)\n\n# If the call failed\nelse:\n  print \"Could not deploy Objects Server.\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"3d9213bc_runbook","main_task_local_reference":{"kind":"app_task","name":"c24ec0f4_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ObjectsDeploy"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2df39396_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"99158279_runbook","main_task_local_reference":{"kind":"app_task","name":"2df39396_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ObjectsDeploy"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"624e7341_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3bdf0bb5_runbook","main_task_local_reference":{"kind":"app_task","name":"624e7341_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ObjectsDeploy"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ffbf240e_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"23fed97c_runbook","main_task_local_reference":{"kind":"app_task","name":"ffbf240e_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ObjectsDeploy"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"edc254ce_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"6db9f32e_runbook","main_task_local_reference":{"kind":"app_task","name":"edc254ce_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[{"kind":"app_service","name":"DarkSite"}],"name":"ObjectsDeploy","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"CLUSTER_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"SUBNET_UUID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"EXTERNAL_IP","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"DarkSite_AHV"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"9df21a13_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"dc251959_runbook","main_task_local_reference":{"kind":"app_task","name":"9df21a13_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"DarkSite_AHV"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"f2d9c4e2_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"a13c40c8_runbook","main_task_local_reference":{"kind":"app_task","name":"f2d9c4e2_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"DarkSite_AHV","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"60","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"ROOT"}},"editables":{"create_spec":{"resources":{"nic_list":{},"serial_port_list":{}}}},"os_type":"Linux","create_spec":{"name":"dark-site-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"default-net","uuid":"6afbcefe-0ffc-4381-a761-107376729ad2"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":2,"gpu_list":[],"memory_size_mib":2048,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":null,"power_state":"ON","type":"","account_uuid":"3daefa74-3a94-4274-9af2-ee74ac91d4c5","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"DarkSite_Image","uuid":"9197658b-cd44-400e-bddb-af8e9db58188"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]},{"description":"","action_list":[],"type":"EXISTING_VM","name":"PC","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{ip_address}@@","delay_secs":"60","disable_readiness_probe":true},"os_type":"Linux","create_spec":{"type":"PROVISION_EXISTING_MACHINE","address":"localhost"},"variable_list":[]}],"credential_definition_list":[{"username":"root","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"ROOT"},{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"PC_CREDS"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"DarkSite"}],"name":"Package1","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"Enable LCM Dark Site"},{"kind":"app_task","name":"Check if Objects is Enabled"},{"kind":"app_task","name":"Enable Objects if Necessary"},{"kind":"app_task","name":"LCM Perform Inventory"},{"kind":"app_task","name":"Get OSS and MSP UUIDs"},{"kind":"app_task","name":"Create LCM Plan"},{"kind":"app_task","name":"Run LCM Plan to Upgrade MSP and OSS"},{"kind":"app_task","name":"Enable Objects Again"}],"name":"ad1be8f9_dag","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Enable LCM Dark Site"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Check if Objects is Enabled"}},{"from_task_reference":{"kind":"app_task","name":"Check if Objects is Enabled"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Enable Objects if Necessary"}},{"from_task_reference":{"kind":"app_task","name":"Enable Objects if Necessary"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"LCM Perform Inventory"}},{"from_task_reference":{"kind":"app_task","name":"LCM Perform Inventory"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Get OSS and MSP UUIDs"}},{"from_task_reference":{"kind":"app_task","name":"Get OSS and MSP UUIDs"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create LCM Plan"}},{"from_task_reference":{"kind":"app_task","name":"Create LCM Plan"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Run LCM Plan to Upgrade MSP and OSS"}},{"from_task_reference":{"kind":"app_task","name":"Run LCM Plan to Upgrade MSP and OSS"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Enable Objects Again"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Enable LCM Dark Site","state":"ACTIVE","attrs":{"script":"# Set the JWT, headers and payload\npc_user = '@@{PC_CREDS.username}@@'\npc_pass = '@@{PC_CREDS.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\npayload = {\"value\":\"{\\\".oid\\\":\\\"LifeCycleManager\\\",\\\".method\\\":\\\"lcm_framework_rpc\\\",\\\".kwargs\\\":{\\\"method_class\\\":\\\"LcmFramework\\\",\\\"method\\\":\\\"configure\\\",\\\"args\\\":[\\\"http:\/\/@@{address}@@\/release\\\",false]}}\"}\n\n# Set the address for LCM call\nurl = \"https:\/\/localhost:9440\/PrismGateway\/services\/rest\/v1\/genesis\"\n\n# Make the LCM POST Call\nresp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass,\n              params=json.dumps(payload), headers=headers, verify=False)\n\n# If the LCM call went through successfully\nif resp.ok:\n  print \"LCM Dark Site enabled successfully.\", json.dumps(json.loads(resp.content), indent=4)\n    \n# If the LCM call failed\nelse:\n  print \"LCM Dark Site was not enabled.\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Check if Objects is Enabled","state":"ACTIVE","attrs":{"exit_status":[],"script":"# Set the JWT, headers and payload\npc_user = '@@{PC_CREDS.username}@@'\npc_pass = '@@{PC_CREDS.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Set the address for Objects Check\nurl = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/services\/oss\/status\"\n\n# Make the Objects Check\nresp = urlreq(url, verb='GET', auth='BASIC', user=pc_user, passwd=pc_pass,\n              headers=headers, verify=False)\n\n# If set value of Objects Check to status variable\nif resp.ok:\n  stat = json.loads(resp.content)\n  status = stat.get('service_enablement_status')\n  print \"OBJECT_STATUS=\" + status\n    \n# If the Objects call failed\nelse:\n  print \"Could not check to see if Objects is enabled or not.\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n","eval_variables":["OBJECT_STATUS"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Enable Objects if Necessary","state":"ACTIVE","attrs":{"script":"# Set the JWT, headers and payload\npc_user = '@@{PC_CREDS.username}@@'\npc_pass = '@@{PC_CREDS.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nobj_status = '@@{OBJECT_STATUS}@@'\npayload = {\"state\": \"ENABLE\"}\n\n# Set the address for Objects Check\nurl = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/services\/oss\"\n\n\nif obj_status == 'ENABLED':\n  print \"Objects is already enabled\"\nelif obj_status == 'DISABLED':\n  print \"Objects is DISABLED, we will now enable it.\"\n    # Make the Objects Check\n  resp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass,\n                params=json.dumps(payload), headers=headers, verify=False)\n  if resp.ok:\n    print \"Command to Enable Objects is running\"\n    # Loop until Objects is enabled.\n    status = obj_status\n    for x in range(30):\n    #while (status != \"ENABLED\"):\n      sleep(10) \n      check_url = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/services\/oss\/status\"\n      check_resp = urlreq(check_url, verb='GET', auth='BASIC', user=pc_user, passwd=pc_pass,\n                          headers=headers, verify=False)\n      stat = json.loads(check_resp.content)\n      status = stat.get('service_enablement_status')\n      if status == 'ENABLED':\n        print(\"Objects successfully enabled.\")\n        exit(0)\n      else:\n        print \"Objects Status is \" + status\n    print \"Command to Enable Objects failed while enabling.\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n  else:\n    print \"Command to Enable Objects failed.\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nelse:\n  print \"OBJECT_STATUS is empty\"\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"LCM Perform Inventory","state":"ACTIVE","attrs":{"script":"# Set the JWT, headers and payload\npc_user = '@@{PC_CREDS.username}@@'\npc_pass = '@@{PC_CREDS.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\npayload = {\"value\":\"{\\\".oid\\\":\\\"LifeCycleManager\\\",\\\".method\\\":\\\"lcm_framework_rpc\\\",\\\".kwargs\\\":{\\\"method_class\\\":\\\"LcmFramework\\\",\\\"method\\\":\\\"perform_inventory\\\",\\\"args\\\":[\\\"http:\/\/@@{address}@@\/release\\\"]}}\"}\n\n# Set the address for LCM call\nurl = \"https:\/\/localhost:9440\/PrismGateway\/services\/rest\/v1\/genesis\"\n\n# Make the LCM POST Call\nresp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass,\n              params=json.dumps(payload), headers=headers, verify=False)\n\n# If the LCM call went through successfully\nif resp.ok:\n  task = json.loads(resp.content)[\"value\"].split(\": \")[1].strip(\"}\").strip('\"')\n  print \"LCM Perform Inventory Task Started.\", json.dumps(json.loads(resp.content), indent=4)\n  print \"LCM Task: \" + task\n\n  task_url = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/tasks\/\" + task\n  for x in range(20):\n    sleep(30)\n    task_resp = urlreq(task_url, verb='GET', auth='BASIC', user=pc_user, passwd=pc_pass,\n                       headers=headers, verify=False)\n    if task_resp.ok:\n      task_dict = json.loads(task_resp.content)\n      print(\"Task status: \" + task_dict[\"status\"])\n      if task_dict[\"status\"] == \"SUCCEEDED\":\n        print(\"LCM Inventory Complete.\")\n        exit(0)\n    else:\n      print(\"Task_resp call failed\" + json.dumps(json.loads(task_resp), indent=4))\n  \n  print(\"LCM Inventory timed out.\" + json.dumps(json.loads(task_resp), indent=4))\n  exit(1)\n  \n# If the LCM call failed\nelse:\n  print \"LCM Perform Inventory failed.\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Get OSS and MSP UUIDs","state":"ACTIVE","attrs":{"exit_status":[],"script":"# Set the JWT, headers and payload\npc_user = '@@{PC_CREDS.username}@@'\npc_pass = '@@{PC_CREDS.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\npayloadobj = {\"entity_type\": \"lcm_entity_v2\",\"group_member_count\": 500,\"group_member_attributes\": [{\"attribute\": \"uuid\"},{\"attribute\": \"entity_model\"}],\"query_name\": \"lcm:EntityGroupModel\",\"grouping_attribute\": \"location_id\",\"filter_criteria\": \"entity_model==Objects Manager\"}\npayloadmsp = {\"entity_type\": \"lcm_entity_v2\",\"group_member_count\": 500,\"group_member_attributes\": [{\"attribute\": \"uuid\"},{\"attribute\": \"entity_model\"}],\"query_name\": \"lcm:EntityGroupModel\",\"grouping_attribute\": \"location_id\",\"filter_criteria\": \"entity_model==MSP\"}\n\n\n# Set the address for Objects Check\nurl = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/groups\"\n\n# Make the Objects Check\nrespobj = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass,\n              params=json.dumps(payloadobj), headers=headers, verify=False)\n\nrespmsp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass,\n              params=json.dumps(payloadmsp), headers=headers, verify=False)\n\n\n# If set value of Objects Check to status variable\nif respobj.ok:\n  objdata = json.loads(respobj.content)\n  #print \"Objects JSON Output\"\n  #print objdata\n  print(\"OBJECT_UUID=\" + objdata[\"group_results\"][0][\"entity_results\"][0][\"entity_id\"])\nif respmsp.ok:\n  mspdata = json.loads(respmsp.content)\n  #print \"MSP JSON Output\"\n  #print mspdata\n  print(\"MSP_UUID=\" + mspdata[\"group_results\"][0][\"entity_results\"][0][\"entity_id\"])\n    \n# If the Objects call failed\nelse:\n  print \"Could not check to see if Objects is enabled or not.\", json.dumps(json.loads(respobj.content), indent=4)\n  exit(1)","eval_variables":["OBJECT_UUID","MSP_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Create LCM Plan","state":"ACTIVE","attrs":{"script":"# Set the JWT, headers and payload\npc_user = '@@{PC_CREDS.username}@@'\npc_pass = '@@{PC_CREDS.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\npayload = {\"value\":\"{\\\".oid\\\":\\\"LifeCycleManager\\\",\\\".method\\\":\\\"lcm_framework_rpc\\\",\\\".kwargs\\\":{\\\"method_class\\\":\\\"LcmFramework\\\",\\\"method\\\":\\\"generate_plan\\\",\\\"args\\\":[\\\"http:\/\/@@{address}@@\/release\\\",[[\\\"@@{MSP_UUID}@@\\\",\\\"1.0.5\\\"],[\\\"@@{OBJECT_UUID}@@\\\",\\\"2.0\\\"]]]}}\"}\n\n# Set the address for LCM call\nurl = \"https:\/\/localhost:9440\/PrismGateway\/services\/rest\/v1\/genesis\"\n\n# Make the LCM POST Call\nresp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass,\n              params=json.dumps(payload), headers=headers, verify=False)\n\n# If the LCM call went through successfully\nif resp.ok:\n  print \"LCM Upgrade Plan created successfully.\", json.dumps(json.loads(resp.content), indent=4)\n  exit(0)\n    \n# If the LCM call failed\nelse:\n  print \"LCM Upgrade Plan creation failed.\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Run LCM Plan to Upgrade MSP and OSS","state":"ACTIVE","attrs":{"script":"# Set the JWT, headers and payload\npc_user = '@@{PC_CREDS.username}@@'\npc_pass = '@@{PC_CREDS.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\npayload = {\"value\":\"{\\\".oid\\\":\\\"LifeCycleManager\\\",\\\".method\\\":\\\"lcm_framework_rpc\\\",\\\".kwargs\\\":{\\\"method_class\\\":\\\"LcmFramework\\\",\\\"method\\\":\\\"perform_update\\\",\\\"args\\\":[\\\"http:\/\/@@{address}@@\/release\\\",[[\\\"@@{MSP_UUID}@@\\\",\\\"1.0.5\\\"],[\\\"@@{OBJECT_UUID}@@\\\",\\\"2.0\\\"]]]}}\"}\n\n# Set the address for LCM call\nurl = \"https:\/\/localhost:9440\/PrismGateway\/services\/rest\/v1\/genesis\"\n\n# Make the LCM POST Call\nresp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass,\n              params=json.dumps(payload), headers=headers, verify=False)\n\n# If the LCM call went through successfully\n\nif resp.ok:\n  task = json.loads(resp.content)[\"value\"].split(\": \")[1].strip(\"}\").strip('\"')\n  print \"LCM Upgrade Plan Started.\", json.dumps(json.loads(resp.content), indent=4)\n  print \"LCM Task: \" + task\n\n  task_url = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/tasks\/\" + task\n  for x in range(60):\n    sleep(30)\n    task_resp = urlreq(task_url, verb='GET', auth='BASIC', user=pc_user, passwd=pc_pass,\n                       headers=headers, verify=False)\n    if task_resp.ok:\n      task_dict = json.loads(task_resp.content)\n      print(\"Task status: \" + task_dict[\"status\"])\n      if task_dict[\"status\"] == \"SUCCEEDED\":\n        print(\"LCM Inventory Complete.\")\n        exit(0)\n    else:\n      print(\"Task_resp call failed\" + json.dumps(json.loads(task_resp.content), indent=4))\n  \n  print(\"LCM Upgrade Plan timed out.\" + json.dumps(json.loads(task_resp.content), indent=4))\n  exit(1)\n  \n# If the LCM call failed\nelse:\n  print \"LCM Upgrade Plan failed.\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DarkSite"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Enable Objects Again","state":"ACTIVE","attrs":{"script":"# Set the JWT, headers and payload\npc_user = '@@{PC_CREDS.username}@@'\npc_pass = '@@{PC_CREDS.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nobj_status = '@@{OBJECT_STATUS}@@'\npayload = {\"state\": \"ENABLE\"}\n\n# Set the address for Objects Check\nurl = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/services\/oss\"\n\n\nif obj_status == 'ENABLED':\n  print \"Objects is already enabled\"\nelif obj_status == 'DISABLED':\n  print \"Objects is DISABLED, we will now enable it.\"\n    # Make the Objects Check\n  resp = urlreq(url, verb='POST', auth='BASIC', user=pc_user, passwd=pc_pass,\n                params=json.dumps(payload), headers=headers, verify=False)\n  if resp.ok:\n    print \"Command to Enable Objects is running\"\n    # Loop until Objects is enabled.\n    status = obj_status\n    for x in range(30):\n    #while (status != \"ENABLED\"):\n      sleep(10) \n      check_url = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/services\/oss\/status\"\n      check_resp = urlreq(check_url, verb='GET', auth='BASIC', user=pc_user, passwd=pc_pass,\n                          headers=headers, verify=False)\n      stat = json.loads(check_resp.content)\n      status = stat.get('service_enablement_status')\n      if status == 'ENABLED':\n        print(\"Objects successfully enabled.\")\n        exit(0)\n      else:\n        print \"Objects Status is \" + status\n    print \"Command to Enable Objects failed while enabling.\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n  else:\n    print \"Command to Enable Objects failed.\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nelse:\n  print \"OBJECT_STATUS is empty\"\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"d59cb83b_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"ad1be8f9_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"e7dceb57_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"ca2f04b2_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"e7dceb57_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"ObjectsDeploy"}],"name":"Package2","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package2"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"f14f459c_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"cb4eaae7_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"f14f459c_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package2"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"556bfe2f_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"f68003fe_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"556bfe2f_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"SUBSTRATE_IMAGE","service_local_reference_list":[],"name":"DarkSite_Image","version":"","options":{"type":"","name":"DarkSiteImage","resources":{"image_type":"DISK_IMAGE","checksum":{"checksum_algorithm":"","type":"","checksum_value":""},"source_uri":"https:\/\/storage.googleapis.com\/testdrive-templates\/library\/images\/darksite.qcow2","version":{"product_version":"1.0","type":"","product_name":"DarkSite"},"architecture":"X86_64","type":""},"description":""},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"cca975ad_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package1"}],"substrate_local_reference":{"kind":"app_substrate","name":"DarkSite_AHV"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"4ea464bb_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package2"}],"substrate_local_reference":{"kind":"app_substrate","name":"PC"},"variable_list":[],"description":""}],"description":"","action_list":[],"name":"Default","variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"domain","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"objects_client_ip_end","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"objects_client_ip_start","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"objects_vip_ip","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"objects_dns_ip","value":"","label":"","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"ROOT"},"type":"USER"},"name":"Objects_AutoDeploy"},"api_version":"3.0","metadata":{"last_update_time":"1589816319506928","kind":"blueprint","spec_version":2,"creation_time":"1589651273780627","name":"Objects_AutoDeploy"}}